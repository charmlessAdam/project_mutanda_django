# Generated by Django 5.2.5 on 2025-10-16 08:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name (e.g., Feed, Equipment)', max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, help_text='Icon name for UI', max_length=50)),
                ('color', models.CharField(blank=True, help_text='Color code for UI (e.g., #57552f)', max_length=20)),
                ('requires_expiration', models.BooleanField(default=False, help_text='Does this category require expiration tracking?')),
                ('requires_batch_tracking', models.BooleanField(default=False, help_text='Does this category require batch/lot tracking?')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_inventory_categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Inventory Category',
                'verbose_name_plural': 'Inventory Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Location name (e.g., Silo 1, Main Warehouse)', max_length=200)),
                ('location_type', models.CharField(choices=[('silo', 'Silo'), ('warehouse', 'Warehouse'), ('shed', 'Shed'), ('cabinet', 'Cabinet'), ('refrigerator', 'Refrigerator'), ('tank', 'Tank'), ('yard', 'Yard'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('capacity', models.DecimalField(blank=True, decimal_places=2, help_text='Total capacity', max_digits=10, null=True)),
                ('capacity_unit', models.CharField(blank=True, help_text='Unit (kg, liters, cubic meters)', max_length=50)),
                ('temperature_controlled', models.BooleanField(default=False)),
                ('current_temperature', models.DecimalField(blank=True, decimal_places=2, help_text='Current temperature (Â°C)', max_digits=5, null=True)),
                ('humidity', models.DecimalField(blank=True, decimal_places=2, help_text='Current humidity (%)', max_digits=5, null=True)),
                ('building', models.CharField(blank=True, help_text='Building name or number', max_length=200)),
                ('floor', models.CharField(blank=True, max_length=50)),
                ('section', models.CharField(blank=True, max_length=100)),
                ('coordinates', models.JSONField(blank=True, help_text='GPS or map coordinates', null=True)),
                ('requires_authorization', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_storage_locations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['location_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Item name', max_length=200)),
                ('quantity', models.DecimalField(decimal_places=2, default=0, help_text='Current quantity', max_digits=10)),
                ('unit', models.CharField(help_text='Unit of measurement (kg, liters, pieces, bags)', max_length=50)),
                ('reorder_level', models.DecimalField(decimal_places=2, default=0, help_text='Alert when quantity drops below this', max_digits=10)),
                ('optimal_quantity', models.DecimalField(blank=True, decimal_places=2, help_text='Optimal stock level', max_digits=10, null=True)),
                ('brand', models.CharField(blank=True, max_length=200)),
                ('model_number', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('specifications', models.TextField(blank=True, help_text='Technical specifications')),
                ('supplier', models.CharField(blank=True, max_length=200)),
                ('supplier_contact', models.CharField(blank=True, max_length=200)),
                ('purchase_date', models.DateField(blank=True, null=True)),
                ('cost_per_unit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('currency', models.CharField(default='USD', max_length=10)),
                ('expiration_date', models.DateField(blank=True, help_text='Expiration or best-before date', null=True)),
                ('batch_number', models.CharField(blank=True, max_length=100)),
                ('lot_number', models.CharField(blank=True, max_length=100)),
                ('barcode', models.CharField(blank=True, max_length=100, null=True)),
                ('sku', models.CharField(blank=True, help_text='Stock Keeping Unit', max_length=100)),
                ('condition', models.CharField(blank=True, choices=[('new', 'New'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('needs_repair', 'Needs Repair'), ('broken', 'Broken')], max_length=50)),
                ('last_maintenance_date', models.DateField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('maintenance_notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_consumable', models.BooleanField(default=True, help_text='Is this item consumed/used up?')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_items', to='inventory.inventorycategory')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_inventory_items', to=settings.AUTH_USER_MODEL)),
                ('last_updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_inventory_items', to=settings.AUTH_USER_MODEL)),
                ('storage_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_items', to='inventory.storagelocation')),
            ],
            options={
                'ordering': ['category__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('low_stock', 'Low Stock'), ('out_of_stock', 'Out of Stock'), ('expiring_soon', 'Expiring Soon'), ('expired', 'Expired'), ('needs_maintenance', 'Needs Maintenance'), ('overstock', 'Overstock'), ('temperature', 'Temperature Alert'), ('other', 'Other')], max_length=20)),
                ('severity', models.CharField(choices=[('critical', 'Critical'), ('warning', 'Warning'), ('info', 'Info')], max_length=10)),
                ('message', models.TextField()),
                ('recommended_action', models.TextField(blank=True)),
                ('is_read', models.BooleanField(default=False)),
                ('is_resolved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_inventory_alerts', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='inventory.inventoryitem')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='inventory.storagelocation')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StockTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('purchase', 'Purchase/Stock In'), ('usage', 'Usage/Stock Out'), ('transfer', 'Transfer Between Locations'), ('adjustment', 'Stock Adjustment'), ('waste', 'Waste/Spoilage'), ('return', 'Return to Supplier'), ('loss', 'Loss/Theft')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Quantity added or removed (use positive for in, negative for out)', max_digits=10)),
                ('previous_quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('new_quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_date', models.DateTimeField(auto_now_add=True)),
                ('reference_number', models.CharField(blank=True, help_text='Invoice, receipt, or reference number', max_length=100)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('cost_per_unit', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('purpose', models.TextField(blank=True, help_text='Why this transaction occurred')),
                ('notes', models.TextField(blank=True)),
                ('batch_number', models.CharField(blank=True, max_length=100)),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='inventory.inventoryitem')),
                ('performed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_transactions', to=settings.AUTH_USER_MODEL)),
                ('from_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outgoing_transactions', to='inventory.storagelocation')),
                ('to_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incoming_transactions', to='inventory.storagelocation')),
            ],
            options={
                'ordering': ['-transaction_date'],
                'indexes': [models.Index(fields=['-transaction_date'], name='inventory_s_transac_d9f9eb_idx'), models.Index(fields=['item', '-transaction_date'], name='inventory_s_item_id_d981d6_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['category', 'is_active'], name='inventory_i_categor_83e0f2_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['storage_location', 'is_active'], name='inventory_i_storage_d0ad6f_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryitem',
            index=models.Index(fields=['expiration_date'], name='inventory_i_expirat_6ff874_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryalert',
            index=models.Index(fields=['is_resolved', '-created_at'], name='inventory_i_is_reso_08b4eb_idx'),
        ),
        migrations.AddIndex(
            model_name='inventoryalert',
            index=models.Index(fields=['severity', '-created_at'], name='inventory_i_severit_38c7f7_idx'),
        ),
    ]
